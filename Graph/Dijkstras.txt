#include <iostream>
#include <vector>
#include <queue>

using namespace std;
#define node pair<int ,int>
#define mp(a, b) make_pair(a, b)

vector<node> graph[50];
vector<int> visited(50, -1);
void dijkstras(){
    priority_queue<node> myQueue;
    
    myQueue.push(mp(0,1));
    while(!myQueue.empty()){
        
        node x = myQueue.top();
        myQueue.pop();
        
        if(visited[x.second] != -1 && visited[x.second] <= x.first){
            continue;
        }
        visited[x.second] = x.first;
        
        for(int i=0; i< graph[x.second].size(); i++){
            myQueue.push(mp(graph[x.second][i].first + x.first, graph[x.second][i].second));
        }
    }
}
int main(){
    
    int N;
    cin>>N;
    int u,v,w;
    for(int i= 0; i<N; i++){
        cin>>u>>v>>w;
        graph[u].push_back(mp(w,v));
    }
    
    dijkstras();
    for(int i=1 ;i <=10; i++){
        cout<<i<<" "<<visited[i]<<" \n";
    }
    return 0;
}