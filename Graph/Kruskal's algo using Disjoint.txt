#include <iostream>
#include <vector>

using namespace std;
#define node pair<int, int>
#define mp(a,b,c) make_pair(a,make_pair(b,c))

vector<pair<int, node>> graph ,mst; 

int parent[50];

int findSet(int x, int parent[]){
    if(x != parent[x]){
        parent[x] = findSet(parent[x], parent);
    }
    return parent[x];
}
int total =0;
void dijkstras(int N){

    for(int i=0; i< N; i++){
        //cout<<graph[i].second.first<<graph[i].second.second<<"\n";
            int pu = findSet(graph[i].second.first, parent);
            int pv = findSet(graph[i].second.second, parent);
           // cout<<pu<<" "<<pv<<"\n";    
        if(pu != pv){

            mst.push_back(graph[i]);
            total += graph[i].first;
            parent[pu] = parent[pv];
        }
    }

}
void reset(){
    for(int i=0; i<50; i++){
        parent[i] = i;
    }
}
int main(){
    
    int N; 
    cin>>N;
    int u,v,w;
    for(int i=0; i < N; i++){
        cin>>u>>v>>w;
        graph.push_back(mp(w,  u, v));
    }
    
    reset();
    dijkstras(N);
    for(int i=0; i<mst.size(); i++){
        cout<<mst[i].second.first<<" "<<mst[i].second.second<<"\n";
    }
    cout<<total<<" ";
    return 0;   
}