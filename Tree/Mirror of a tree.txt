//Mirror of a tree is reverse of its Inorder traversal.

#include <iostream>
using namespace std;
 
struct node{
	int data;
	struct node* left;
	struct node* right;
};
 
struct node* makeNode(int data){
	struct node* temp = new struct node;
 
	temp->data = data;
	temp->left = NULL;
	temp->right = NULL;
 
	return temp;
}
void mirror(struct node* root){
	if(root == NULL){
		return ;
	}
	if(root->left == NULL && root->right == NULL){
		return;	
	}
	struct node *  temp;
	temp = root->left;
	root->left = root->right;
	root->right  = temp;
	mirror(root->left);
	mirror(root->right);
 
}
 
void inOrder(struct node* root){
	if(root == NULL){
		return;
	}
	inOrder(root->left);
	cout<<root->data;
	inOrder(root->right);
}
int main() {
	// your code goes here
		// your code goes here
	struct node* root = makeNode(5);
	root->left = makeNode(3);
	root->right = makeNode(7);
	root->left->left = makeNode(2);
	root->left->right = makeNode(4);
	root->right->right = makeNode(8);
	root->right->left = makeNode(6);
	mirror(root);
	inOrder(root);
	return 0;
}